#include <iostream>
#include <conio.h>
#include <windows.h>
#include <fstream>

using namespace std;

class SnakeGame {
private:
    bool gameOver;
    const int width;
    const int height;
    int x, y, fruitX, fruitY, score;
    int tailX[100], tailY[100];
    int nTail;
    enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
    Direction dir;
    int gameSpeed; // New member variable to store game speed

public:
    SnakeGame(int gameWidth, int gameHeight) : width(gameWidth), height(gameHeight) {
        gameOver = false;
        dir = STOP;
        x = width / 2;
        y = height / 2;
        fruitX = rand() % width;
        fruitY = rand() % height;
        score = 0;
        nTail = 0;
        gameSpeed = 100; // Default game speed (milliseconds)
    }

    void SetDifficulty(int level) {
        switch (level) {
        case 1:
            gameSpeed = 150; // Slower speed for level 1
            break;
        case 2:
            gameSpeed = 100; // Moderate speed for level 2
            break;
        case 3:
            gameSpeed = 50; // Faster speed for level 3
            break;
        default:
            gameSpeed = 100; // Default speed
        }
    }

    void Draw() {
        system("cls");
        for (int i = 0; i < width + 2; i++)
            cout << "#";
        cout << endl;

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (j == 0)
                    cout << "#";
                if (i == y && j == x)
                    cout << "O";
                else if (i == fruitY && j == fruitX)
                    cout << "F";
                else {
                    bool printTail = false;
                    for (int k = 0; k < nTail; k++) {
                        if (tailX[k] == j && tailY[k] == i) {
                            cout << "o";
                            printTail = true;
                        }
                    }
                    if (!printTail)
                        cout << " ";
                }
                if (j == width - 1)
                    cout << "#";
            }
            cout << endl;
        }

        for (int i = 0; i < width + 2; i++)
            cout << "#";
        cout << endl;
        cout << "Score:" << score << endl;
    }

    void Input() {
        if (_kbhit()) {
            switch (_getch()) {
            case 'j':
                dir = LEFT;
                break;
            case 'l':
                dir = RIGHT;
                break;
            case 'i':
                dir = UP;
                break;
            case 'k':
                dir = DOWN;
                break;
            case 'x':
                gameOver = true;
                break;
            }
        }
    }

    void Logic() {
        int prevX = tailX[0];
        int prevY = tailY[0];
        int prev2X, prev2Y;
        tailX[0] = x;
        tailY[0] = y;

        for (int i = 1; i < nTail; i++) {
            prev2X = tailX[i];
            prev2Y = tailY[i];
            tailX[i] = prevX;
            tailY[i] = prevY;
            prevX = prev2X;
            prevY = prev2Y;
        }

        switch (dir) {
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
        }

        if (x >= width)
            x = 0;
        else if (x < 0)
            x = width - 1;

        if (y >= height)
            y = 0;
        else if (y < 0)
            y = height - 1;

        for (int i = 0; i < nTail; i++) {
            if (tailX[i] == x && tailY[i] == y)
                gameOver = true;
        }

        if (x == fruitX && y == fruitY) {
            score += 10;
            fruitX = rand() % width;
            fruitY = rand() % height;
            nTail++;
        }
    }

    void SaveScore() {
        ofstream file("scores.txt", ios::app);
        if (file.is_open()) {
            file << "Score: " << score << endl;
            file.close();
        }
        else {
            cout << "Unable to save score." << endl;
        }
    }

    void Play() {
        while (!gameOve;2r) {
            Draw();
            Input();
            Logic();
            Sleep(gameSpeed); // Use gameSpeed to control the game's speed
        }
        SaveScore();
        cout << "Game Over!" << endl;
        cout << "Final Score: " << score << endl;
    }
};

int main() {
    int difficultyLevel;

    cout << "Snake Game" << endl;
    cout << "Select difficulty level (1, 2, 3): ";
    cin >> difficultyLevel;

    SnakeGame game(20, 20);
    game.SetDifficulty(difficultyLevel);
    game.Play();

    return 0;
}
